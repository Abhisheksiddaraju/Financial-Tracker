name: CI - Financial Tracker (Windows)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  windows-check:
    name: Windows Compatibility Check
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check file structure
      run: |
        echo "üìÅ Checking file structure on Windows..."
        
        # Check if main files exist
        if (Test-Path "financial-tracker.html") {
          echo "‚úÖ financial-tracker.html exists"
          
          # Get file size using PowerShell
          $fileSize = (Get-Item "financial-tracker.html").Length
          echo "üìä HTML file size: $fileSize bytes"
          
          if ($fileSize -gt 500000) {
            echo "‚ö†Ô∏è  HTML file is large: $fileSize bytes"
          } else {
            echo "‚úÖ HTML file size is reasonable: $fileSize bytes"
          }
        } else {
          echo "‚ùå financial-tracker.html not found"
          exit 1
        }
        
        # Check documentation files
        $docs = @("README.md", "LICENSE", "CHANGELOG.md", "CONTRIBUTING.md", "CODE_OF_CONDUCT.md")
        foreach ($doc in $docs) {
          if (Test-Path $doc) {
            echo "‚úÖ $doc exists"
          } else {
            echo "‚ùå $doc missing"
            exit 1
          }
        }
        
        # Check GitHub files
        if (Test-Path ".github/workflows/ci.yml") {
          echo "‚úÖ GitHub Actions workflow exists"
        } else {
          echo "‚ùå GitHub Actions workflow missing"
          exit 1
        }
        
        if (Test-Path ".github/ISSUE_TEMPLATE/bug_report.md") {
          echo "‚úÖ Bug report template exists"
        } else {
          echo "‚ùå Bug report template missing"
          exit 1
        }
        
        if (Test-Path ".github/ISSUE_TEMPLATE/feature_request.md") {
          echo "‚úÖ Feature request template exists"
        } else {
          echo "‚ùå Feature request template missing"
          exit 1
        }
        
        if (Test-Path ".github/pull_request_template.md") {
          echo "‚úÖ Pull request template exists"
        } else {
          echo "‚ùå Pull request template missing"
          exit 1
        }
        
        # Count total files
        $totalFiles = (Get-ChildItem -Recurse -File | Measure-Object).Count
        echo "üìä Total files in repository: $totalFiles"
        
        echo ""
        echo "üéâ Windows compatibility check completed successfully!"
        
    - name: Check HTML content
      run: |
        echo "üîç Checking HTML content..."
        
        # Check for essential HTML elements
        $htmlContent = Get-Content "financial-tracker.html" -Raw
        
        if ($htmlContent -match "<!DOCTYPE html>") {
          echo "‚úÖ DOCTYPE declaration found"
        } else {
          echo "‚ùå DOCTYPE declaration missing"
        }
        
        if ($htmlContent -match "<html") {
          echo "‚úÖ HTML tag found"
        } else {
          echo "‚ùå HTML tag missing"
        }
        
        if ($htmlContent -match "<head") {
          echo "‚úÖ Head section found"
        } else {
          echo "‚ùå Head section missing"
        }
        
        if ($htmlContent -match "<body") {
          echo "‚úÖ Body section found"
        } else {
          echo "‚ùå Body section missing"
        }
        
        if ($htmlContent -match "<script") {
          echo "‚úÖ JavaScript found"
        } else {
          echo "‚ùå JavaScript missing"
        }
        
        if ($htmlContent -match "<style") {
          echo "‚úÖ CSS found"
        } else {
          echo "‚ùå CSS missing"
        }
        
        # Check for Chart.js integration
        if ($htmlContent -match "Chart\.js") {
          echo "‚úÖ Chart.js integration found"
        } else {
          echo "‚ùå Chart.js integration missing"
        }
        
        # Check for localStorage usage
        if ($htmlContent -match "localStorage") {
          echo "‚úÖ LocalStorage API usage found"
        } else {
          echo "‚ùå LocalStorage API usage missing"
        }
        
        echo ""
        echo "‚úÖ HTML content validation completed!"
        
    - name: Check for sensitive data
      run: |
        echo "üîí Checking for sensitive data on Windows..."
        
        # Check for actual sensitive data patterns (not comments or workflow files)
        # Look for patterns that indicate real credentials, not just the words
        $SENSITIVE_FOUND = $false
        
        # Only check the main HTML file for sensitive data, not workflow files
        if (Test-Path "financial-tracker.html") {
          echo "üîç Scanning financial-tracker.html for sensitive data..."
          
          # Check for actual API keys (not just the word "api_key")
          if (Select-String -Path "financial-tracker.html" -Pattern "sk_[a-zA-Z0-9]{24,}" -AllMatches | Select-Object -First 1) {
            echo "‚ö†Ô∏è  Potential Stripe secret key found"
            $SENSITIVE_FOUND = $true
          }
          
          if (Select-String -Path "financial-tracker.html" -Pattern "pk_[a-zA-Z0-9]{24,}" -AllMatches | Select-Object -First 1) {
            echo "‚ö†Ô∏è  Potential Stripe publishable key found"
            $SENSITIVE_FOUND = $true
          }
          
          # Check for actual passwords (not just the word "password")
          if (Select-String -Path "financial-tracker.html" -Pattern "password.*=.*['`"][^'`"]{8,}" -AllMatches | Select-Object -First 1) {
            echo "‚ö†Ô∏è  Potential hardcoded password found"
            $SENSITIVE_FOUND = $true
          }
          
          # Check for actual tokens (not just the word "token")
          if (Select-String -Path "financial-tracker.html" -Pattern "token.*=.*['`"][a-zA-Z0-9]{32,}" -AllMatches | Select-Object -First 1) {
            echo "‚ö†Ô∏è  Potential hardcoded token found"
            $SENSITIVE_FOUND = $true
          }
          
          # Check for actual secrets (not just the word "secret")
          if (Select-String -Path "financial-tracker.html" -Pattern "secret.*=.*['`"][a-zA-Z0-9]{16,}" -AllMatches | Select-Object -First 1) {
            echo "‚ö†Ô∏è  Potential hardcoded secret found"
            $SENSITIVE_FOUND = $true
          }
          
          # Check for actual API keys (not just the word "api_key")
          if (Select-String -Path "financial-tracker.html" -Pattern "api_key.*=.*['`"][a-zA-Z0-9]{16,}" -AllMatches | Select-Object -First 1) {
            echo "‚ö†Ô∏è  Potential hardcoded API key found"
            $SENSITIVE_FOUND = $true
          }
          
          # Check for hardcoded database credentials
          if (Select-String -Path "financial-tracker.html" -Pattern "mysql://|postgresql://|mongodb://" -AllMatches | Select-Object -First 1) {
            echo "‚ö†Ô∏è  Potential database connection string found"
            $SENSITIVE_FOUND = $true
          }
          
          # Check for hardcoded URLs with credentials
          if (Select-String -Path "financial-tracker.html" -Pattern "https://[^:]*:[^@]*@" -AllMatches | Select-Object -First 1) {
            echo "‚ö†Ô∏è  Potential URL with embedded credentials found"
            $SENSITIVE_FOUND = $true
          }
        } else {
          echo "‚ùå financial-tracker.html not found - skipping sensitive data check"
        }
        
        if ($SENSITIVE_FOUND) {
          echo "‚ùå Sensitive data found - please review and remove"
          exit 1
        } else {
          echo "‚úÖ No sensitive data found"
        }
        
    - name: Check file encoding
      run: |
        echo "üî§ Checking file encoding..."
        
        # Check if files are UTF-8 encoded (PowerShell)
        try {
          $content = Get-Content "financial-tracker.html" -Encoding UTF8 -ErrorAction Stop
          echo "‚úÖ HTML file is UTF-8 encoded"
        } catch {
          echo "‚ö†Ô∏è  HTML file encoding check failed"
        }
        
        # Check markdown files
        $mdFiles = @("README.md", "CHANGELOG.md", "CONTRIBUTING.md", "CODE_OF_CONDUCT.md")
        foreach ($file in $mdFiles) {
          if (Test-Path $file) {
            try {
              $content = Get-Content $file -Encoding UTF8 -ErrorAction Stop
              echo "‚úÖ $file is UTF-8 encoded"
            } catch {
              echo "‚ö†Ô∏è  $file encoding check failed"
            }
          }
        }
        
        echo ""
        echo "‚úÖ File encoding validation completed!"
        
    - name: Generate Windows report
      run: |
        echo ""
        echo "üéâ Windows CI Complete!"
        echo "üìä All Windows compatibility checks passed"
        echo "üöÄ Ready for cross-platform deployment"
        
        # Show project stats
        echo ""
        echo "üìÅ Project Statistics:"
        if (Test-Path "financial-tracker.html") {
          $fileSize = (Get-Item "financial-tracker.html").Length
          echo "- HTML file: $fileSize bytes"
        }
        
        $mdCount = (Get-ChildItem -Filter "*.md" | Measure-Object).Count
        echo "- Documentation: $mdCount markdown files"
        
        $totalFiles = (Get-ChildItem -Recurse -File | Measure-Object).Count
        echo "- Total files: $totalFiles"
        
        echo ""
        echo "‚úÖ All Windows quality checks passed!"
